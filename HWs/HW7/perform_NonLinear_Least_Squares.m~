%
% Function that preforms NonLinear Least Squares on given data
%

function perform_NonLinear_Least_Square()

% number of data points
N = 2500;
% gets data from other script 
data = give_NonLinear_Least_Squares_Data(N);
xData = data(:,1);
yData = data(:,2);
% initilizes error and tolerance 
err = 1;
tol = 1e-5;

% Initial beta values to try 
B0 = 1;
B1 = 0.5;
B2 = 0.3;

while err > tol
    for i = 1:N
        x = xData(i);
        expy = exp(-(x-B1)^2 / (2*B2^2));
        % jacobian of the model function
        J(i,1) = expy;
        J(i,2) = B0 * ((x-B1)/B2^2) * expy;
        J(i,3) = B0 * ((x-B1)^2 / B2^3) * expy;
    end
    
    for i = 1:N
        x = xData(i);
        y = yData(i);
        expy = exp(-(x-B1)^2 / (2*B2^2));
        % finds difference between  true y-value and function value at 
        % current beta
        f(i, 1) = y - (B0 * expy);
    end
    
    % Psuedo inverse of the jacobian 
    PI =  inv(J' * J) * J' * f;
    % new beta values = old beta value + little bit 
    nextB0 = B0 + PI(1);
    nextB1 = B1 + PI(2);
    nextB2 = B2 + PI(3);
    
    % calculates error 
    err = sqrt((nextB0-B0)^2 + (nextB1 - B1)^2 + (nextB2-B2)^2);
    % resets betas
    B0 = nextB0;
    B1 = nextB1;
    B2 = nextB2;
end

% calculates function values at best beta 
for i = 1:N
  x = xData(i);
  expy = exp(-(x-B1)^2 / (2*B2^2));
  f(i, 1) = (B0 * expy);
end

% residule
R = yData - f;
% l2-Norm for residule
L_2_Norm = sqrt(R.' * R)

hold on
plot(xData, f, 'r', 'LineWidth', 4)
hold off
xlabel('x Values');
ylabel('y Value');
legend('Data', 'Best Sine Series Fit')